name: R2S OpenWrt Build

on:
  workflow_dispatch:
    inputs:
      branch:
        type: string
        required: true
        description: 构件主版本号
        default: 24.10

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk aria2 gh \
              gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
              python3-setuptools rsync swig unzip zlib1g-dev file wget python3-pyelftools

      - name: Pull code
        run: |
          git clone --branch openwrt-${{ github.event.inputs.branch }} --depth 1 https://git.openwrt.org/openwrt/openwrt.git

      - name: Prepare feed for make config
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          # turboacc
          curl -sSL https://raw.githubusercontent.com/chenmozhijin/turboacc/luci/add_turboacc.sh -o add_turboacc.sh && bash add_turboacc.sh --no-sfe

          # 合并配置
          cp -a ../r2s/. ./
          sed -i "s/FRP_TOKEN/${{ secrets.FRP_TOKEN }}/g" files/etc/config/frpc
          sed -i "s/PPPOE_USERNAME/${{ secrets.PPPOE_USERNAME }}/g" files/etc/config/network
          sed -i "s/PPPOE_PASSWORD/${{ secrets.PPPOE_PASSWORD }}/g" files/etc/config/network
          make defconfig

      - name: Make download with aria2
        run: |
          cd openwrt
          make -j $(($(nproc)+1)) download DLAGENTS="https https = /usr/bin/aria2c -c -x 16 -s 16 -k 1M"

      - name: Make World
        run: |
          cd openwrt
          make -j $(($(nproc)+1)) V=s

      - name: Authenticate gh CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Create release with current date tag
        run: |
          TAG=R2S
          mv ./openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz ./r2s-openwrt-${{ github.event.inputs.branch }}-squashfs-sysupgrade.img.gz
          cp ./r2s-openwrt-${{ github.event.inputs.branch }}-squashfs-sysupgrade.img.gz ./r2s-openwrt-${{ github.event.inputs.branch }}-squashfs-sysupgrade-$(date +%Y%m%d)..img.gz
          gh release upload $TAG --clobber ./r2s-openwrt-${{ github.event.inputs.branch }}-squashfs-sysupgrade-$(date +%Y%m%d)..img.gz
          gh release upload release --clobber ./r2s-openwrt-${{ github.event.inputs.branch }}-squashfs-sysupgrade.img.gz
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Clean up old assets in release
        run: |
          # Get all assets for the geoip tag, sorted by created_at (newest first)
          assets=$(gh api repos/{owner}/{repo}/releases/tags/${{ env.TAG }} --jq '.assets | sort_by(.created_at) | reverse')

          # Count total assets
          asset_count=$(echo "$assets" | jq length)

          # If more than 5 assets, delete the oldest ones
          if [ "$asset_count" -gt 5 ]; then
            echo "Found $asset_count assets, keeping newest 5, deleting the rest"
            echo "$assets" | jq -r '.[5:][] | .name' | while read -r asset_name; do
              echo "Deleting asset name: $asset_name"
              gh release delete-asset ${{ env.TAG }} "$asset_name" -y
            done
          else
            echo "Found $asset_count assets (5 or fewer), no assets will be deleted"
          fi
